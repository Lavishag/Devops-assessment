AWSTemplateFormatVersion: '2010-09-09'


Resources:

# SNS topic resource with SQS (MyQue) as subscriber
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - MyQueue
              - Arn
          Protocol: sqs

# SQS used to receive messaged from SNS
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120

# S3 bucket (with Versioning & Lifecycle enabled) to store messages which lambda sends from SQS
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: glacier
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 1
                StorageClass: GLACIER


# SNS Subscription message filter to be applied to SQS
  SNSSubscriptionFilter:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: MyQueue
      Endpoint:
        Fn::GetAtt:
          - CRMIntegrationQueue
          - Arn
      Protocol: sqs
      RawMessageDelivery: 'true'
      FilterPolicy:                   #FilterPolicy for specific message type in SNS topic
        Message-Type:
          - Type1


# Lambda execution IAM Role used to read & delete messages from SQS queue, putobjects in S3 bucket
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:                     # limited access to SQS queue
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              Resource: !GetAtt MyQueue.Arn
        - PolicyName: allowS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:                     # limited access to SQS queue
              - s3:PutObject
              -s3:PutObjectAcl
              -s3:PutObjectTagging
              -s3:PutObjectVersionAcl
              -s3:PutObjectVersionTagging
              Resource: !GetAtt MyS3Bucket.Arn


#Lambda function ----> sends message body (received from SQS) to S3 bucket
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import urllib.parse
          import boto3

          s3 = boto3.client('s3')

          def handler(event, context):
            full_message = event['Records'][0]
            message_body = full_message['Message']
            path = "mymessages"
            encoded_string = string.encode("utf-8")
            bucket_name = "MyS3Bucket"
            s3.Bucket(bucket_name).put_object(Key=path, Body=encoded_string)
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: Python 3.8
      Timeout: 60
      MemorySize: 512


# Lambda function called when SQS receives messages from SNS
  MyLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt MyLambdaFunction.Arn


# IAM user for creating SNS topic
  MyUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password:
          Ref: MyUserPassword

  MyUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: MyUser

# creates IAM group which has access to publish SNS topics
  MyPublishTopicGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: MyTopicGroupPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  Ref: MySNSTopic

  AddUserToMyPublishTopicGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName:
        Ref: MyPublishTopicGroup
      Users:
        - Ref: MyUser

  MyQueueUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password:
          Ref: MyQueueUserPassword

  MyQueueUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: MyQueueUser

  MyRDMessageQueueGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: MyQueueGroupPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                Resource:
                  - Fn::GetAtt:
                      - MyQueue
                      - Arn
  AddUserToMyQueueGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName:
        Ref: MyRDMessageQueueGroup
      Users:
        - Ref: MyQueueUser
  MyQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: '*'
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: MySNSTopic
      Queues:
        - Ref: MyQueue


Outputs:
  MySNSTopicTopicARN:
    Value:
      Ref: MySNSTopic
  BucketName:
    Value: !Ref S3Bucket
    Description: Name of the sample Amazon S3 bucket with a lifecycle configuration.
  MyQueueInfo:
    Value:
      Fn::Join:
        - ' '
        - - 'ARN:'
          - Fn::GetAtt:
              - MyQueue
              - Arn
          - 'URL:'
          - Ref: MyQueue
  MyUserInfo:
    Value:
      Fn::Join:
        - ' '
        - - 'ARN:'
          - Fn::GetAtt:
              - MyUser
              - Arn
          - 'Access Key:'
          - Ref: MyUserKey
          - 'Secret Key:'
          - Fn::GetAtt:
              - MyUserKey
              - SecretAccessKey
  MyQueueUserInfo:
    Value:
      Fn::Join:
        - ' '
        - - 'ARN:'
          - Fn::GetAtt:
              - MyQueueUser
              - Arn
          - 'Access Key:'
          - Ref: MyQueueUserKey
          - 'Secret Key:'
          - Fn::GetAtt:
              - MyQueueUserKey
              - SecretAccessKey
